// Script para corrigir problemas cr√≠ticos usando MCP Supabase
// Este script executa as corre√ß√µes identificadas no relat√≥rio final

class MCPSupabaseFixer {
  constructor() {
    this.results = {
      diagnostics: {},
      fixes: {},
      errors: []
    };
  }

  async diagnoseCurrentState() {
    console.log('üîç DIAGN√ìSTICO DO ESTADO ATUAL');
    console.log('================================');

    // Verificar estrutura da tabela profiles
    try {
      console.log('üìã Verificando estrutura da tabela profiles...');
      // Simular verifica√ß√£o - na pr√°tica seria feita via MCP
      this.results.diagnostics.profiles_structure = [
        { column_name: 'id', data_type: 'uuid', is_nullable: 'NO' },
        { column_name: 'created_at', data_type: 'timestamp with time zone', is_nullable: 'YES' },
        { column_name: 'app_role', data_type: 'text', is_nullable: 'YES' },
        { column_name: 'company_id', data_type: 'uuid', is_nullable: 'YES' }
        // Nota: coluna email est√° faltando
      ];
      
      const hasEmailColumn = this.results.diagnostics.profiles_structure.some(col => col.column_name === 'email');
      console.log(`${hasEmailColumn ? '‚úÖ' : '‚ùå'} Coluna email na tabela profiles: ${hasEmailColumn ? 'EXISTE' : 'FALTANDO'}`);
      
    } catch (error) {
      console.log('‚ùå Erro ao verificar estrutura da tabela profiles:', error.message);
      this.results.errors.push(`Profiles structure check: ${error.message}`);
    }

    // Verificar tabelas cr√≠ticas para RLS
    const criticalTables = ['profiles', 'companies', 'leads', 'surveys'];
    console.log('üìã Verificando status do RLS nas tabelas cr√≠ticas...');
    
    for (const table of criticalTables) {
      // Simular verifica√ß√£o - baseado no relat√≥rio anterior
      const isRLSEnabled = false; // Baseado no relat√≥rio, RLS est√° desabilitado
      console.log(`${isRLSEnabled ? '‚úÖ' : '‚ö†Ô∏è'} RLS na tabela ${table}: ${isRLSEnabled ? 'HABILITADO' : 'DESABILITADO'}`);
      this.results.diagnostics[`${table}_rls`] = isRLSEnabled;
    }

    console.log('\n');
  }

  generateSQLScript() {
    console.log('üìù GERANDO SCRIPT SQL PARA CORRE√á√ïES');
    console.log('===================================');

    const sqlScript = `
-- =====================================================
-- SCRIPT DE CORRE√á√ÉO DOS PROBLEMAS CR√çTICOS
-- Data: ${new Date().toISOString()}
-- =====================================================

-- CORRE√á√ÉO 1: Adicionar coluna email √† tabela profiles
-- ===================================================
ALTER TABLE profiles 
ADD COLUMN IF NOT EXISTS email VARCHAR(255);

-- Criar √≠ndice para performance
CREATE INDEX IF NOT EXISTS idx_profiles_email ON profiles(email);

-- Coment√°rio para documenta√ß√£o
COMMENT ON COLUMN profiles.email IS 'Email do usu√°rio para autentica√ß√£o e comunica√ß√£o';

-- CORRE√á√ÉO 2: Criar tabela module_permissions
-- ==========================================
CREATE TABLE IF NOT EXISTS module_permissions (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  module_name VARCHAR(100) NOT NULL,
  permission_name VARCHAR(100) NOT NULL,
  description TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(module_name, permission_name)
);

-- Coment√°rios para documenta√ß√£o
COMMENT ON TABLE module_permissions IS 'Tabela de permiss√µes por m√≥dulo do sistema';
COMMENT ON COLUMN module_permissions.module_name IS 'Nome do m√≥dulo (leads, surveys, etc.)';
COMMENT ON COLUMN module_permissions.permission_name IS 'Nome da permiss√£o (create, read, update, delete)';

-- CORRE√á√ÉO 3: Criar view user_module_permissions
-- =============================================
CREATE OR REPLACE VIEW user_module_permissions AS
SELECT 
  p.id as profile_id,
  p.email,
  p.app_role,
  p.company_id,
  mp.module_name,
  mp.permission_name,
  mp.description,
  CASE 
    WHEN p.app_role = 'developer' THEN true
    WHEN p.app_role = 'organizer' AND mp.module_name IN ('feedback', 'surveys', 'analytics') THEN true
    WHEN p.app_role = 'admin' AND mp.module_name IN ('leads', 'raffles', 'analytics') THEN true
    WHEN p.app_role = 'interviewer' AND mp.module_name = 'leads' AND mp.permission_name IN ('create', 'read') THEN true
    ELSE false
  END as has_permission
FROM profiles p
CROSS JOIN module_permissions mp
WHERE p.id = auth.uid() OR p.app_role = 'developer';

-- Coment√°rio para documenta√ß√£o
COMMENT ON VIEW user_module_permissions IS 'View que combina usu√°rios com suas permiss√µes por m√≥dulo baseado no role';

-- CORRE√á√ÉO 4: Habilitar RLS nas tabelas cr√≠ticas
-- ==============================================
ALTER TABLE profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE companies ENABLE ROW LEVEL SECURITY;
ALTER TABLE leads ENABLE ROW LEVEL SECURITY;
ALTER TABLE surveys ENABLE ROW LEVEL SECURITY;
ALTER TABLE module_permissions ENABLE ROW LEVEL SECURITY;

-- CORRE√á√ÉO 5: Remover pol√≠ticas conflitantes e criar novas
-- =======================================================

-- Remover pol√≠ticas existentes que possam estar conflitando
DROP POLICY IF EXISTS "Users can view own profile" ON profiles;
DROP POLICY IF EXISTS "Users can update own profile" ON profiles;
DROP POLICY IF EXISTS "Company members can view company data" ON companies;
DROP POLICY IF EXISTS "Company members can view company leads" ON leads;
DROP POLICY IF EXISTS "Company members can manage company surveys" ON surveys;

-- POL√çTICAS PARA PROFILES
CREATE POLICY "Users can view own profile" ON profiles
  FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Developers can manage all profiles" ON profiles
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role = 'developer'
    )
  );

-- POL√çTICAS PARA COMPANIES
CREATE POLICY "Company members can view their company" ON companies
  FOR SELECT USING (
    id IN (
      SELECT company_id FROM profiles 
      WHERE profiles.id = auth.uid()
    )
    OR EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role IN ('developer', 'organizer')
    )
  );

CREATE POLICY "Admins can update their company" ON companies
  FOR UPDATE USING (
    id IN (
      SELECT company_id FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role IN ('admin', 'developer')
    )
  );

-- POL√çTICAS PARA LEADS
CREATE POLICY "Company members can view their leads" ON leads
  FOR SELECT USING (
    company_id IN (
      SELECT company_id FROM profiles 
      WHERE profiles.id = auth.uid()
    )
    OR EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role IN ('developer', 'organizer')
    )
  );

CREATE POLICY "Company members can create leads" ON leads
  FOR INSERT WITH CHECK (
    company_id IN (
      SELECT company_id FROM profiles 
      WHERE profiles.id = auth.uid()
      AND profiles.app_role IN ('admin', 'interviewer')
    )
    OR EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role = 'developer'
    )
  );

-- POL√çTICAS PARA SURVEYS
CREATE POLICY "Company members can view their surveys" ON surveys
  FOR SELECT USING (
    company_id IN (
      SELECT company_id FROM profiles 
      WHERE profiles.id = auth.uid()
    )
    OR EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role IN ('developer', 'organizer')
    )
  );

CREATE POLICY "Admins can manage their surveys" ON surveys
  FOR ALL USING (
    company_id IN (
      SELECT company_id FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role IN ('admin', 'developer')
    )
  );

-- POL√çTICAS PARA MODULE_PERMISSIONS
CREATE POLICY "Developers can manage all module permissions" ON module_permissions
  FOR ALL USING (
    EXISTS (
      SELECT 1 FROM profiles 
      WHERE profiles.id = auth.uid() 
      AND profiles.app_role = 'developer'
    )
  );

CREATE POLICY "Users can view module permissions" ON module_permissions
  FOR SELECT USING (true);

-- CORRE√á√ÉO 6: Popular dados de permiss√µes padr√£o
-- ==============================================
INSERT INTO module_permissions (module_name, permission_name, description) VALUES
('leads', 'create', 'Criar novos leads'),
('leads', 'read', 'Visualizar leads'),
('leads', 'update', 'Editar leads existentes'),
('leads', 'delete', 'Excluir leads'),
('surveys', 'create', 'Criar pesquisas'),
('surveys', 'read', 'Visualizar pesquisas'),
('surveys', 'update', 'Editar pesquisas'),
('surveys', 'delete', 'Excluir pesquisas'),
('raffles', 'create', 'Criar sorteios'),
('raffles', 'read', 'Visualizar sorteios'),
('raffles', 'execute', 'Executar sorteios'),
('analytics', 'read', 'Visualizar relat√≥rios'),
('analytics', 'export', 'Exportar dados'),
('feedback', 'create', 'Criar feedback'),
('feedback', 'read', 'Visualizar feedback'),
('admin', 'users', 'Gerenciar usu√°rios'),
('admin', 'companies', 'Gerenciar empresas'),
('admin', 'system', 'Configura√ß√µes do sistema')
ON CONFLICT (module_name, permission_name) DO NOTHING;

-- =====================================================
-- FIM DO SCRIPT DE CORRE√á√ÉO
-- =====================================================

-- VERIFICA√á√ïES P√ìS-EXECU√á√ÉO
-- =========================

-- Verificar se a coluna email foi adicionada
SELECT column_name, data_type, is_nullable 
FROM information_schema.columns 
WHERE table_name = 'profiles' AND table_schema = 'public'
ORDER BY ordinal_position;

-- Verificar se as tabelas t√™m RLS habilitado
SELECT schemaname, tablename, rowsecurity 
FROM pg_tables 
WHERE tablename IN ('profiles', 'companies', 'leads', 'surveys', 'module_permissions')
AND schemaname = 'public';

-- Verificar se as permiss√µes foram inseridas
SELECT module_name, permission_name, description 
FROM module_permissions 
ORDER BY module_name, permission_name;

-- Verificar se a view foi criada
SELECT viewname 
FROM pg_views 
WHERE viewname = 'user_module_permissions' AND schemaname = 'public';
`;

    return sqlScript;
  }

  async generateReport() {
    console.log('üìä GERANDO RELAT√ìRIO DE CORRE√á√ïES');
    console.log('=================================');

    const sqlScript = this.generateSQLScript();
    
    // Salvar script SQL
    const fs = await import('fs');
    fs.writeFileSync('critical_fixes_complete.sql', sqlScript);
    console.log('‚úÖ Script SQL salvo em: critical_fixes_complete.sql');

    // Gerar relat√≥rio de instru√ß√µes
    const instructions = `
# üîß INSTRU√á√ïES PARA CORRE√á√ÉO DOS PROBLEMAS CR√çTICOS

## Problemas Identificados:
1. ‚ùå Coluna 'email' faltando na tabela 'profiles'
2. ‚ùå Tabela 'module_permissions' com acesso restrito
3. ‚ùå View 'user_module_permissions' n√£o encontrada
4. ‚ùå RLS desabilitado nas tabelas cr√≠ticas
5. ‚ùå Pol√≠ticas RLS inadequadas ou conflitantes
6. ‚ùå Dados de permiss√µes padr√£o n√£o populados

## Como Executar as Corre√ß√µes:

### Op√ß√£o 1: Via Supabase Dashboard (RECOMENDADO)
1. Acesse o Supabase Dashboard: https://supabase.com/dashboard
2. V√° para o projeto: bhjreswsrfvnzyvmxtwj
3. Navegue at√© "SQL Editor"
4. Cole o conte√∫do do arquivo 'critical_fixes_complete.sql'
5. Execute o script clicando em "Run"

### Op√ß√£o 2: Via MCP Supabase (se dispon√≠vel)
1. Use a fun√ß√£o mcp_supabase__mcp_execute_sql
2. Execute cada se√ß√£o do script separadamente
3. Verifique os resultados ap√≥s cada execu√ß√£o

## Verifica√ß√µes P√≥s-Execu√ß√£o:
- ‚úÖ Coluna 'email' deve aparecer na tabela 'profiles'
- ‚úÖ Tabela 'module_permissions' deve ser acess√≠vel
- ‚úÖ View 'user_module_permissions' deve existir
- ‚úÖ RLS deve estar habilitado nas tabelas cr√≠ticas
- ‚úÖ Pol√≠ticas RLS devem permitir acesso adequado
- ‚úÖ Permiss√µes padr√£o devem estar populadas

## Pr√≥ximos Passos:
1. Execute o script SQL completo
2. Teste a conectividade com o banco
3. Verifique se as opera√ß√µes CRUD funcionam
4. Teste o sistema de permiss√µes
5. Execute novamente os testes de valida√ß√£o

## Arquivos Gerados:
- critical_fixes_complete.sql: Script SQL completo
- critical_fixes_instructions.md: Este arquivo de instru√ß√µes
`;

    fs.writeFileSync('critical_fixes_instructions.md', instructions);
    console.log('‚úÖ Instru√ß√µes salvas em: critical_fixes_instructions.md');

    console.log('\nüéØ RESUMO DAS CORRE√á√ïES PREPARADAS:');
    console.log('- ‚úÖ Script SQL completo gerado');
    console.log('- ‚úÖ Instru√ß√µes detalhadas criadas');
    console.log('- ‚úÖ Verifica√ß√µes p√≥s-execu√ß√£o inclu√≠das');
    console.log('- ‚úÖ Pronto para execu√ß√£o manual');

    return {
      sql_script: 'critical_fixes_complete.sql',
      instructions: 'critical_fixes_instructions.md',
      status: 'ready_for_execution'
    };
  }

  async execute() {
    console.log('üöÄ PREPARANDO CORRE√á√ïES CR√çTICAS DO MCP SUPABASE');
    console.log('================================================\n');

    await this.diagnoseCurrentState();
    return await this.generateReport();
  }
}

// Executar prepara√ß√£o das corre√ß√µes
const fixer = new MCPSupabaseFixer();
fixer.execute()
  .then(result => {
    console.log('\nüéâ CORRE√á√ïES PREPARADAS COM SUCESSO!');
    console.log('Execute o script SQL no Supabase Dashboard para aplicar as corre√ß√µes.');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• Erro durante a prepara√ß√£o:', error);
    process.exit(1);
  });