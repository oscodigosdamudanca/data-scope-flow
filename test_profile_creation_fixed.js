import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_PUBLISHABLE_KEY s√£o obrigat√≥rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testProfileCreationAfterFix() {
  console.log('üîß Teste de Cria√ß√£o de Perfil Ap√≥s Corre√ß√£o RLS\n');

  try {
    // 1. Criar usu√°rio de teste
    console.log('1Ô∏è‚É£ Criando usu√°rio de teste...');
    const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
      email: `test-${Date.now()}@example.com`,
      password: 'testpassword123'
    });

    if (signUpError) {
      console.error('‚ùå Erro ao criar usu√°rio:', signUpError.message);
      return;
    }

    console.log('‚úÖ Usu√°rio criado com sucesso');
    console.log('   ID:', signUpData.user?.id);

    // 2. Fazer login
    console.log('\n2Ô∏è‚É£ Fazendo login...');
    const { data: signInData, error: signInError } = await supabase.auth.signInWithPassword({
      email: signUpData.user?.email,
      password: 'testpassword123'
    });

    if (signInError) {
      console.error('‚ùå Erro no login:', signInError.message);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso');

    // 3. Verificar se j√° existe perfil
    console.log('\n3Ô∏è‚É£ Verificando perfil existente...');
    const { data: existingProfile, error: profileCheckError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', signInData.user.id)
      .single();

    if (profileCheckError && profileCheckError.code !== 'PGRST116') {
      console.error('‚ùå Erro ao verificar perfil:', profileCheckError);
      return;
    }

    if (existingProfile) {
      console.log('‚ÑπÔ∏è  Perfil j√° existe:', existingProfile);
      return;
    }

    console.log('‚úÖ Nenhum perfil encontrado, prosseguindo com cria√ß√£o');

    // 4. Tentar criar perfil
    console.log('\n4Ô∏è‚É£ Tentando criar perfil...');
    const { data: newProfile, error: createError } = await supabase
      .from('profiles')
      .insert([
        {
          id: signInData.user.id,
          display_name: 'Usu√°rio Teste',
          phone: '+5511999999999'
        }
      ])
      .select()
      .single();

    if (createError) {
      console.error('‚ùå ERRO AO CRIAR PERFIL:', {
        code: createError.code,
        message: createError.message,
        details: createError.details,
        hint: createError.hint
      });
      return;
    }

    console.log('‚úÖ PERFIL CRIADO COM SUCESSO!');
    console.log('   Dados:', newProfile);

    // 5. Verificar se o perfil foi realmente criado
    console.log('\n5Ô∏è‚É£ Verificando se o perfil foi salvo...');
    const { data: savedProfile, error: verifyError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', signInData.user.id)
      .single();

    if (verifyError) {
      console.error('‚ùå Erro ao verificar perfil salvo:', verifyError);
      return;
    }

    console.log('‚úÖ Perfil verificado com sucesso:', savedProfile);

    // 6. Limpar dados de teste
    console.log('\n6Ô∏è‚É£ Limpando dados de teste...');
    await supabase.from('profiles').delete().eq('id', signInData.user.id);
    console.log('‚úÖ Dados de teste removidos');

  } catch (error) {
    console.error('‚ùå Erro inesperado:', error);
  }

  console.log('\nüèÅ Teste conclu√≠do');
}

testProfileCreationAfterFix();