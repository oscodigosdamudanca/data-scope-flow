import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Carrega as vari√°veis de ambiente
dotenv.config();

// Obt√©m as credenciais do Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Verifica se as credenciais est√£o dispon√≠veis
if (!supabaseUrl || !supabaseKey) {
  console.error('Erro: Credenciais do Supabase n√£o encontradas no arquivo .env');
  process.exit(1);
}

// Cria o cliente Supabase
const supabase = createClient(supabaseUrl, supabaseKey);

async function testSupabaseConnection() {
  console.log('üîç Testando conex√£o com o Supabase...\n');
  
  try {
    // Tabelas que realmente existem no banco baseado na verifica√ß√£o MCP
    const existingTables = [
      'companies',
      'company_memberships', 
      'leads',
      'surveys',
      'survey_questions',
      'survey_responses',
      'user_roles'
    ];
    
    console.log('üìã Verificando tabelas existentes:\n');
    
    for (const table of existingTables) {
      try {
        console.log(`Verificando tabela '${table}'...`);
        
        const { data, error } = await supabase
          .from(table)
          .select('*')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Erro ao acessar '${table}': ${error.message}`);
        } else {
          console.log(`‚úÖ Tabela '${table}' acess√≠vel. Registros encontrados: ${data.length}`);
        }
      } catch (err) {
        console.log(`‚ùå Erro inesperado ao verificar '${table}': ${err.message}`);
      }
    }
    
    console.log('\nüîó Testando relacionamentos...');
    
    // Testa relacionamento companies -> surveys
    try {
      const { data: companiesData, error: companiesError } = await supabase
        .from('companies')
        .select(`
          id,
          name,
          surveys (
            id,
            title
          )
        `)
        .limit(1);
        
      if (!companiesError) {
        console.log('‚úÖ Relacionamento companies -> surveys funcionando');
      } else {
        console.log(`‚ùå Erro no relacionamento companies -> surveys: ${companiesError.message}`);
      }
    } catch (err) {
      console.log(`‚ùå Erro ao testar relacionamentos: ${err.message}`);
    }
    
    console.log('\nüîê Verificando RLS (Row Level Security)...');
    
    // Verifica se RLS est√° habilitado nas tabelas principais
    for (const table of ['companies', 'leads', 'surveys']) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('id')
          .limit(1);
          
        if (error && error.message.includes('RLS')) {
          console.log(`‚úÖ RLS ativo na tabela '${table}' (acesso negado sem autentica√ß√£o)`);
        } else if (!error) {
          console.log(`‚ö†Ô∏è Tabela '${table}' acess√≠vel sem autentica√ß√£o (RLS pode estar desabilitado)`);
        } else {
          console.log(`‚ùì Status RLS incerto para '${table}': ${error.message}`);
        }
      } catch (err) {
        console.log(`‚ùå Erro ao verificar RLS em '${table}': ${err.message}`);
      }
    }
    
    console.log('\n‚úÖ Verifica√ß√£o completa!');
    
  } catch (error) {
    console.error('‚ùå Erro geral ao testar conex√£o:', error.message);
  }
}

testSupabaseConnection();