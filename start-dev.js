// Script para iniciar o ambiente de desenvolvimento sem Docker
import { execSync } from 'child_process';
import fs from 'fs';
import dotenv from 'dotenv';

// Carrega vari√°veis de ambiente
dotenv.config();

// Verifica se as vari√°veis de ambiente est√£o definidas
const requiredEnvVars = [
  'VITE_SUPABASE_URL',
  'VITE_SUPABASE_PUBLISHABLE_KEY',
  'VITE_SUPABASE_PROJECT_ID'
];

const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);

if (missingVars.length > 0) {
  console.error('‚ùå Erro: As seguintes vari√°veis de ambiente n√£o est√£o definidas:');
  missingVars.forEach(varName => console.error(`   - ${varName}`));
  console.error('Por favor, verifique seu arquivo .env');
  process.exit(1);
}

console.log('üîç Verificando conex√£o com Supabase...');
try {
  // Executa o script de teste de conex√£o
  execSync('node test_supabase.js', { stdio: 'inherit' });
  console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
} catch (error) {
  console.error('‚ùå Erro ao conectar com Supabase:', error.message);
  process.exit(1);
}

console.log('üîÑ Sincronizando tipos TypeScript com o banco de dados...');
try {
  // Executa o script de sincroniza√ß√£o de tipos
  execSync('node sync_types.js', { stdio: 'inherit' });
  console.log('‚úÖ Tipos sincronizados com sucesso!');
} catch (error) {
  console.error('‚ö†Ô∏è Aviso: N√£o foi poss√≠vel sincronizar os tipos:', error.message);
  console.log('Continuando mesmo assim...');
}

console.log('üöÄ Iniciando servidor de desenvolvimento...');
try {
  // Inicia o servidor de desenvolvimento
  execSync('npm run dev', { stdio: 'inherit' });
} catch (error) {
  console.error('‚ùå Erro ao iniciar o servidor de desenvolvimento:', error.message);
  process.exit(1);
}