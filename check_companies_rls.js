import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function checkCompaniesRLS() {
  console.log('üîç Verificando pol√≠ticas RLS da tabela companies...\n');

  try {
    // 1. Verificar se a tabela companies existe
    console.log('1Ô∏è‚É£ Verificando se a tabela companies existe...');
    const { data: companiesData, error: companiesError } = await supabase
      .from('companies')
      .select('id')
      .limit(1);

    if (companiesError) {
      console.error('‚ùå Erro ao acessar tabela companies:', companiesError.message);
      return;
    }
    console.log('‚úÖ Tabela companies acess√≠vel');

    // 2. Testar autentica√ß√£o
    console.log('\n2Ô∏è‚É£ Testando autentica√ß√£o...');
    const { data: authData, error: authError } = await supabase.auth.signUp({
      email: `test-${Date.now()}@example.com`,
      password: 'test123456'
    });

    if (authError) {
      console.error('‚ùå Erro na autentica√ß√£o:', authError.message);
      return;
    }
    console.log('‚úÖ Usu√°rio criado:', authData.user?.id);

    // 3. Fazer login
    const { data: loginData, error: loginError } = await supabase.auth.signInWithPassword({
      email: authData.user?.email,
      password: 'test123456'
    });

    if (loginError) {
      console.error('‚ùå Erro no login:', loginError.message);
      return;
    }
    console.log('‚úÖ Login realizado');

    // 4. Tentar criar uma empresa
    console.log('\n3Ô∏è‚É£ Tentando criar empresa...');
    const { data: companyData, error: companyError } = await supabase
      .from('companies')
      .insert({
        name: 'Empresa Teste RLS',
        cnpj: '12345678000199',
        email: 'teste@empresa.com',
        phone: '11999999999'
      })
      .select();

    if (companyError) {
      console.error('‚ùå ERRO AO CRIAR EMPRESA:', companyError.message);
      console.error('Detalhes do erro:', companyError);
      
      // Verificar se √© erro de RLS
      if (companyError.message.includes('RLS') || companyError.message.includes('policy')) {
        console.log('\nüîí PROBLEMA IDENTIFICADO: Pol√≠tica RLS bloqueando INSERT');
        console.log('üí° SOLU√á√ÉO: Criar pol√≠tica RLS que permita INSERT para usu√°rios autenticados');
      }
    } else {
      console.log('‚úÖ EMPRESA CRIADA COM SUCESSO:', companyData);
    }

    // 5. Verificar pol√≠ticas RLS existentes
    console.log('\n4Ô∏è‚É£ Verificando pol√≠ticas RLS existentes...');
    const { data: policiesData, error: policiesError } = await supabase
      .rpc('get_table_policies', { table_name: 'companies' });

    if (policiesError) {
      console.log('‚ÑπÔ∏è N√£o foi poss√≠vel verificar pol√≠ticas RLS via RPC');
    } else {
      console.log('üìã Pol√≠ticas encontradas:', policiesData);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

checkCompaniesRLS();
