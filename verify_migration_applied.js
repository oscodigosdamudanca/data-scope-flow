import dotenv from 'dotenv';
import { createClient } from '@supabase/supabase-js';

// Configurar vari√°veis de ambiente
dotenv.config();

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_PUBLISHABLE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente obrigat√≥rias n√£o encontradas:', {
    VITE_SUPABASE_URL: !!supabaseUrl,
    VITE_SUPABASE_PUBLISHABLE_KEY: !!supabaseKey
  });
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function verifyMigration() {
  console.log('üîç Verificando se a migra√ß√£o foi aplicada corretamente...\n');

  try {
    // 1. Verificar pol√≠ticas RLS na tabela profiles
    console.log('1Ô∏è‚É£ Verificando pol√≠ticas RLS na tabela profiles...');
    const { data: policies, error: policiesError } = await supabase
      .rpc('exec_sql', {
        sql_query: `
          SELECT 
            schemaname,
            tablename,
            policyname,
            permissive,
            roles,
            cmd,
            qual,
            with_check
          FROM pg_policies 
          WHERE tablename = 'profiles' 
          ORDER BY policyname;
        `
      });

    if (policiesError) {
      console.error('‚ùå Erro ao verificar pol√≠ticas:', policiesError);
      return;
    }

    console.log('üìã Pol√≠ticas encontradas:');
    if (policies && policies.length > 0) {
      policies.forEach(policy => {
        console.log(`   - ${policy.policyname} (${policy.cmd})`);
        console.log(`     Roles: ${policy.roles}`);
        console.log(`     With Check: ${policy.with_check}`);
        console.log('');
      });
    } else {
      console.log('   ‚ö†Ô∏è Nenhuma pol√≠tica encontrada na tabela profiles');
    }

    // 2. Verificar se a fun√ß√£o has_role existe
    console.log('2Ô∏è‚É£ Verificando fun√ß√£o has_role...');
    const { data: functions, error: functionsError } = await supabase
      .rpc('exec_sql', {
        sql_query: `
          SELECT 
            proname,
            prosrc
          FROM pg_proc 
          WHERE proname = 'has_role';
        `
      });

    if (functionsError) {
      console.error('‚ùå Erro ao verificar fun√ß√£o has_role:', functionsError);
      return;
    }

    if (functions && functions.length > 0) {
      console.log('‚úÖ Fun√ß√£o has_role encontrada');
    } else {
      console.log('‚ùå Fun√ß√£o has_role N√ÉO encontrada');
    }

    // 3. Testar a pol√≠tica manualmente
    console.log('3Ô∏è‚É£ Testando pol√≠tica manualmente...');
    const { data: testResult, error: testError } = await supabase
      .rpc('exec_sql', {
        sql_query: `
          SELECT 
            'Test policy check' as test,
            auth.uid() as current_user_id,
            (SELECT public.has_role(auth.uid(), 'developer')) as has_developer_role;
        `
      });

    if (testError) {
      console.error('‚ùå Erro ao testar pol√≠tica:', testError);
    } else {
      console.log('üìä Resultado do teste:', testResult);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

verifyMigration();